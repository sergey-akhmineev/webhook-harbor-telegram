from flask import Flask, request
import requests
import tomllib
import logging

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)


def escape_markdown(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ —Ç–µ–∫—Å—Ç–µ.
    """
    escape_chars = ['\\', '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ conf.toml
try:
    with open("conf.toml", "rb") as toml_file:
        conf_dict = tomllib.load(toml_file)
    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except FileNotFoundError:
    logging.error("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ conf.toml –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    raise Exception("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ conf.toml –Ω–µ –Ω–∞–π–¥–µ–Ω.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏ Chat ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TELEGRAM_API_URL = f'https://api.telegram.org/bot{conf_dict["telegram"]["bot_token"]}/sendMessage'
CHAT_ID = conf_dict["telegram"]["chat_id"]
# –ò—Å–ø–æ–ª—å–∑—É–µ–º None –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ message_thread_id –Ω–µ —É–∫–∞–∑–∞–Ω
MESSAGE_THREAD_ID = conf_dict.get("telegram", {}).get("message_thread_id", None)


@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {data}")

    if data and data.get('type') == 'PUSH_ARTIFACT':
        event_data = data.get('event_data', {})
        repository_info = event_data.get('repository', {})
        resources = event_data.get('resources', [])

        repo_full_name = repository_info.get('repo_full_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
        repo_full_name = escape_markdown(repo_full_name)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

        if not resources:
            logging.warning("–ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return 'No resources to process', 200

        messages = []
        for resource in resources:
            tag = escape_markdown(resource.get('tag', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–≥'))  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            resource_url = resource.get('resource_url', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL')
            operator = escape_markdown(data.get('operator', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            message = (
                f"üì¶ *–ù–æ–≤—ã–π –ø—É—à –≤ Harbor*\n"
                f"*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* {repo_full_name}\n"
                f"*–¢–µ–≥:* {tag}\n"
                f"*URL:* `{resource_url}`\n"
                f"*–ê–≤—Ç–æ—Ä –ø—É—à–∞:* {operator}"
            )
            messages.append(message)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for msg in messages:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
            send_message_to_telegram(msg)
    else:
        logging.warning("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø 'PUSH_ARTIFACT'.")

    return 'OK', 200


def send_message_to_telegram(message):
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown',  # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message_thread_id –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if MESSAGE_THREAD_ID is not None:
        payload['message_thread_id'] = MESSAGE_THREAD_ID

    try:
        response = requests.post(TELEGRAM_API_URL, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP-–æ—à–∏–±–∫–∏
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
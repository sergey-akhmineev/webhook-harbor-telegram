from flask import Flask, request
import requests
import tomllib
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
try:
    with open("conf.toml", "rb") as f:
        conf = tomllib.load(f)
    logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å conf.toml: {e}")
    raise

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
bot_token = conf["telegram"]["bot_token"]
CHAT_ID = conf["telegram"]["chat_id"]
MESSAGE_THREAD_ID = conf["telegram"].get("message_thread_id")
API_URL = f"https://api.telegram.org/bot{bot_token}/sendMessage"

# –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
ENABLED_EVENTS = conf.get("events", {})

# –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
ESCAPE_CHARS = conf.get("markdown", {}).get("escape_chars", [])

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ ESCAPE_CHARS."""
    if not isinstance(text, str):
        text = str(text)
    for ch in ESCAPE_CHARS:
        text = text.replace(ch, f"\\{ch}")
    return text

def send_message_to_telegram(message: str):
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    if MESSAGE_THREAD_ID:
        payload["message_thread_id"] = MESSAGE_THREAD_ID

    try:
        resp = requests.post(API_URL, json=payload)
        resp.raise_for_status()
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    logging.info(f"–í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫: {data}")

    event_type = data.get("type")
    # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not ENABLED_EVENTS.get(event_type, False):
        logging.info(f"–°–æ–±—ã—Ç–∏–µ {event_type} –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return "Ignored", 200

    operator = escape_markdown(data.get("operator", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
    event_data = data.get("event_data", {})
    repo        = event_data.get("repository", {})
    repo_name   = escape_markdown(repo.get("repo_full_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
    resources   = event_data.get("resources", [])

    if not resources:
        logging.warning("–ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return "No resources", 200

    messages = []

    # 1) PUSH_ARTIFACT
    if event_type == "PUSH_ARTIFACT":
        for r in resources:
            tag = escape_markdown(r.get("tag", "‚Äî"))
            url = r.get("resource_url", "‚Äî")
            msg = (
                "üì¶ *–ù–æ–≤—ã–π –ø—É—à –≤ Harbor*\n"
                f"*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* {repo_name}\n"
                f"*–¢–µ–≥:* {tag}\n"
                f"*URL:* `{url}`\n"
                f"*–ê–≤—Ç–æ—Ä –ø—É—à–∞:* {operator}"
            )
            messages.append(msg)

    # 2) PULL_ARTIFACT
    elif event_type == "PULL_ARTIFACT":
        for r in resources:
            tag = escape_markdown(r.get("tag", "‚Äî"))
            url = r.get("resource_url", "‚Äî")
            msg = (
                "üì• *Pull –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤ Harbor*\n"
                f"*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* {repo_name}\n"
                f"*–¢–µ–≥:* {tag}\n"
                f"*URL:* `{url}`\n"
                f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {operator}"
            )
            messages.append(msg)

    # 3) DELETE_ARTIFACT
    elif event_type == "DELETE_ARTIFACT":
        for r in resources:
            tag = escape_markdown(r.get("tag", "‚Äî"))
            url = r.get("resource_url", "‚Äî")
            msg = (
                "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤ Harbor*\n"
                f"*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* {repo_name}\n"
                f"*–¢–µ–≥:* {tag}\n"
                f"*URL:* `{url}`\n"
                f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {operator}"
            )
            messages.append(msg)

    # 4) SCANNING_STOPPED
    elif event_type == "SCANNING_STOPPED":
        for r in resources:
            tag     = escape_markdown(r.get("tag", "‚Äî"))
            url     = r.get("resource_url", "‚Äî")
            overview = r.get("scan_overview", {})
            detail  = next(iter(overview.values()), {})
            status  = escape_markdown(detail.get("scan_status", "‚Äî"))
            duration = detail.get("duration", 0)
            msg = (
                "üîç *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n"
                f"*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* {repo_name}\n"
                f"*–¢–µ–≥:* {tag}\n"
                f"*URL:* `{url}`\n"
                f"*–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∞:* {status}\n"
                f"*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration}s\n"
                f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {operator}"
            )
            messages.append(msg)

    # 5) SCANNING_COMPLETED
    elif event_type == "SCANNING_COMPLETED":
        for r in resources:
            tag      = escape_markdown(r.get("tag", "‚Äî"))
            url      = r.get("resource_url", "‚Äî")
            overview = r.get("scan_overview", {})
            detail   = next(iter(overview.values()), {})
            status   = escape_markdown(detail.get("scan_status", "‚Äî"))
            duration = detail.get("duration", 0)
            severity = escape_markdown(detail.get("severity", "‚Äî"))
            summary  = detail.get("summary", {}) or {}
            total    = summary.get("total", 0)
            fixable  = summary.get("fixable", 0)
            counts   = summary.get("summary", {})

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            counts_lines = ""
            for lvl, cnt in counts.items():
                lvl_esc = escape_markdown(lvl)
                counts_lines += f"*{lvl_esc}:* {cnt}\n"

            scanner = detail.get("scanner", {})
            sc_name = escape_markdown(scanner.get("name", "‚Äî"))
            sc_ver  = escape_markdown(scanner.get("version", "‚Äî"))

            msg = (
                "üîç *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n"
                f"*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* {repo_name}\n"
                f"*–¢–µ–≥:* {tag}\n"
                f"*URL:* `{url}`\n"
                f"*–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∞:* {status}\n"
                f"*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {duration}s\n"
                f"*–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å (–º–∞–∫—Å):* {severity}\n"
                f"*–í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:* {total}\n"
                f"*–ò—Å–ø—Ä–∞–≤–∏–º–æ:* {fixable}\n"
                f"{counts_lines}"
                f"*–°–∫–∞–Ω–µ—Ä:* {sc_name} {sc_ver}\n"
                f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {operator}"
            )
            messages.append(msg)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for m in messages:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:\n{m}")
        send_message_to_telegram(m)

    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
